import os
import pandas as pd
import numpy as np
from typing import Union
from argparse import ArgumentParser
import config


def get_graph(file_tag):
    df = pd.read_csv(file_tag, header=None)

    n_node = df.max().max()                     # number of nodes.

    graph = np.zeros([n_node, n_node])          # main graph matrix.
    for idx in df.values-1:
        graph[tuple(idx)] = 1

    return graph


def parse_argurments():
    parser = ArgumentParser()
    parser.add_argument('-f',
                        dest='in_file',
                        default='dataset/graph_1.txt')
    parser.add_argument('--damp',
                        dest='damp_fac',
                        default=0.15,
                        type=float)
    parser.add_argument('--decay',
                        dest='decay_fac',
                        default=0.9,
                        type=float)
    parser.add_argument('--iter', '--iteration',
                        dest='iter',
                        default=10,
                        type=int)
    return parser.parse_args()


def to_file(file_name, record_txt):
    path = os.path.join(config.RESULT_DIR, file_name)
    os.makedirs(path, exist_ok=True)

    for sub in record_txt:
        if len(sub) == 2:
            data_file, data, newline = *sub, ' '
        else:
            data_file, data, newline = sub
        np.savetxt(os.path.join(path, file_name + data_file),
                   data, fmt='%.3f', newline=newline)


class Node:
    """Node object.

    Parameters
    ----------
    tag : Union[str, int]
        The tag for this node.
    """

    def __init__(self, tag: Union[str, int]):
        self.tag = tag
        self.to_dict = dict()
        self.from_dict = dict()
        self.auth = 1.0
        self.hub = 1.0
        self.pr = 1.0

    def __eq__(self, o):
        if isinstance(o, Node):
            return self.tag == o.tag
        return self.tag == o

    def to_(self, to_n: Node):
        """Connect self to `to_n` node.

        Parameters
        ----------
        to_n : Node
            The target to be connected.
        """
        self.to_dict[to_n.tag] = to_n

    def from_(self, from_n: Node):
        """Connect self from `from_n` node.

        Parameters
        ----------
        from_n : Node
            The target to connect.
        """
        self.from_dict[from_n.tag] = from_n

    def set_auth(self) -> None:
        """Update the authority value."""
        self.auth = sum(node.hub for node in self.from_dict.values())

    def set_hub(self) -> None:
        """Update the hub value."""
        self.hub = sum(node.auth for node in self.to_dict.values())

    def set_pr(self, d: float, n: float) -> None:
        """Update the page rank value."""
        in_neighbors = self.from_dict.values()
        pr_sum = sum((node.pr / len(node.to_dict))
                     for node in in_neighbors)
        rand_jump = d / n
        self.pr = rand_jump + (1-d) * pr_sum


class Graph:
    """The Graph object."""

    def __init__(self):
        self.nodes = dict()

    @staticmethod
    def init(filename):
        """Initialize a new graph by file.

        Parameters
        ----------
        filename : str
            The target file path.

        Returns
        -------
        Graph
            The graph object generated by filename
        """
        with open(filename) as f:
            lines = f.readlines()

        graph = Graph()
        for line in lines:
            graph.add_edge(*line.strip().split(','))
        # graph.nodes.sort(key=lambda node: node.tag)

        return graph

    def __len__(self):
        return len(self.nodes)

    def add_edge(self, from_: Union[int, str], to_: Union[int, str]) -> None:
        """Add edge into graph.

        Parameters
        ----------
        from_ : Union[int, str]
            The tag of `from node`.
        to_ : Union[int, str]
            The tag of `to_node`.
        """
        # transform to int type.
        from_tag = int(from_)
        to_tag = int(to_)

        # get the node from node dictionary.
        from_n = self.nodes.get(from_tag, Node(from_tag))
        to_n = self.nodes.get(to_tag, Node(to_tag))

        # update node dictionary.
        self.nodes[from_tag] = from_n
        self.nodes[to_tag] = to_n

        # node connection.
        from_n.to_(to_n)
        to_n.from_(from_n)

    def to_numpy(self) -> np.array:
        """to numpy array.

        Returns
        -------
        np.array
            A 2-dim array with `column 1 is from node`
            and `column 2 is to node`.
        """
        result = []
        for node in self.nodes.values():
            for to_n in node.to_dict.values():
                result.append([node.tag, to_n.tag])
        return np.array(result)
